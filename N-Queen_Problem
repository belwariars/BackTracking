// N - QUEEN PROBLEM...

#include <bits/stdc++.h>
using namespace std;

# define N 4

int isSafe(int board[N][N], int row, int col)
{
	int i,j;
	
	for(i=0; i<col; i++)
	{
		if(board[row][i]) // left side...
			return 0;
	}
	
	for(i=row,j=col; i<N && j>=0; j--,i++) // left to bottom diagonal
	{
		if(board[i][j])
			return 0;
	}
	
	for(i=row,j=col; j>=0 && i>=0; i--,j--)  // left to top diagonal
	{
		if(board[i][j])
			return 0;
	}
	
	return 1;
}

int solveNqueenUtil(int board[N][N], int col)
{
	if(col >= N)
		return 1;
		
	int i;
	for(i=0; i<N; i++)
	{
		if(isSafe(board, i, col))
		{
			board[i][col] = 1;
			
			if(solveNqueenUtil(board, col+1))
				return 1;
			
			board[i][col] = 0;  // BACKTRACKING...
		}
	}
	
	return 0;
}

void printsol(int board[N][N])
{
	int i,j;
	
	for(i=0; i<N; i++)
	{
		for(j=0; j<N; j++)
		{
			printf("%2d", board[i][j]);
		}
		printf("\n");
	}
}

void solveNqueen(int board[N][N])
{
	if(solveNqueenUtil(board, 0) == 1)
	{
		printf("Solution Exists\n\n");	
		printsol(board);
	}	
	else
	{
		printf("No solution");
	}
}

int main()
{
	int board[N][N] = {{0, 0, 0, 0},
        			  {0, 0, 0, 0},
      				  {0, 0, 0, 0},
      				  {0, 0, 0, 0}
   					  };
   					  
   	solveNqueen(board);
	return 0;
}
